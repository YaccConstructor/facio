{
(*

Copyright 2005-2008 Microsoft Corporation
Copyright 2012-2014 Jack Pappas

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*)

module internal FSharpLex.Lexer

open System.Text
open FSharpLex.Ast
open FSharpLex.Parser
open Microsoft.FSharp.Text.Lexing


let private escape = function
    | '\\' -> '\\'
    | '\'' -> '\''
    | 'n' -> '\n'
    | 't' -> '\t'
    | 'b' -> '\b'
    | 'r' -> '\r'
    | c -> c

let inline private lexeme (lexbuf : LexBuffer<char>) =
    LexBuffer<_>.LexemeString lexbuf

let private newline (lexbuf : LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

let private unexpected_char lexbuf =
    let msg =
        let charStr = lexeme lexbuf
        sprintf "Unexpected character '%s' at position (%i, %i)."
            charStr
            lexbuf.StartPos.Line
            lexbuf.StartPos.Column
    raise <| exn msg

let private digit d =
    if d >= '0' && d <= '9' then
        int32 d - int32 '0'
    else
        let msg = sprintf "The character '%c' does not represent a decimal digit." d
        invalidArg "d" msg

let private hexdigit d =
    if d >= '0' && d <= '9' then
        digit d
    elif d >= 'a' && d <= 'f' then
        int32 d - int32 'a' + 10
    elif d >= 'A' && d <= 'F' then
        int32 d - int32 'A' + 10
    else
        let msg = sprintf "The character '%c' does not represent a hexadecimal digit." d
        invalidArg "d" msg

let private trigraph c1 c2 c3 =
      char (digit c1 * 100 + digit c2 * 10 + digit c3)

let private hexgraph c1 c2 =
    char (hexdigit c1 * 16 + hexdigit c2)

let private unicodegraph_short (s : string) =
    if s.Length <> 4 then
        invalidArg "s" "The string is not the correct length for a short-form Unicode character."

    char <| hexdigit s.[0] * 4096 + hexdigit s.[1] * 256 + hexdigit s.[2] * 16 + hexdigit s.[3]

let private unicodegraph_long (s : string) =
    if s.Length <> 8 then
        invalidArg "s" "The string is not the correct length for a long-form Unicode character."

    let high = hexdigit s.[0] * 4096 + hexdigit s.[1] * 256 + hexdigit s.[2] * 16 + hexdigit s.[3]
    let low = hexdigit s.[4] * 4096 + hexdigit s.[5] * 256 + hexdigit s.[6] * 16 + hexdigit s.[7]
    if high = 0 then
        None, char low
    else
      // A surrogate pair - see http://www.unicode.org/unicode/uni2book/ch03.pdf, section 3.7
      Some (
        char (0xD800 + ((high * 0x10000 + low - 0x10000) / 0x400))),
        char (0xDF30 + ((high * 0x10000 + low - 0x10000) % 0x400))

}

let letter = ['A'-'Z'] | ['a'-'z']
let digit = ['0'-'9']
let whitespace = [' ' '\t']
let char = '\'' ( [^'\\'] | ('\\' ( '\\' | '\'' | "\"" | 'n' | 't' | 'b' | 'r'))) '\''
let hex = ['0'-'9'] | ['A'-'F'] | ['a'-'f']
let hexgraph = '\\' 'x' hex hex
let trigraph = '\\' digit digit digit
let newline = ('\n' | '\r' '\n')
let ident_start_char = letter
let ident_char = ( ident_start_char| digit | ['\'' '_'] )
let ident = ident_start_char ident_char*

let unicodegraph_short = '\\' 'u' hex hex hex hex
let unicodegraph_long = '\\' 'U' hex hex hex hex hex hex hex hex

rule token = parse
    | "rule" { RULE }
    | "parse" { PARSE }
    | "eof" { EOF }
    | "let" { LET }
    | "and" { AND }
    | char {
        let s = lexeme lexbuf
        CHAR (if s.[1] = '\\' then escape s.[2] else s.[1]) }
 
    | '\'' trigraph '\'' {
        let s = lexeme lexbuf
        CHAR (trigraph s.[2] s.[3] s.[4]) }
 
    | '\'' hexgraph '\'' {
        let s = lexeme lexbuf
        CHAR (hexgraph s.[3] s.[4]) }
 
    | '\'' unicodegraph_short '\'' {
        let s = lexeme lexbuf
        CHAR (unicodegraph_short s.[3..6]) }
 
    | '\'' unicodegraph_long '\'' {
        let s = lexeme lexbuf
        match unicodegraph_long s.[3..10] with
        | None, c -> CHAR c
        | Some _, _ ->
            failwith "Unicode characters needing surrogate pairs are not yet supported by this tool." }
 
    | '\'' '\\' ['A'-'Z'] ['a'-'z'] '\'' {
        let s = (lexeme lexbuf).[2..3]
        UNICODE_CATEGORY s }
     
    | '{' {
        let p = lexbuf.StartPos
        let buff = StringBuilder 100
        // adjust the first line to get even indentation for all lines w.r.t. the left hand margin
        buff.Append (String.replicate (lexbuf.StartPos.Column + 1) " ") |> ignore
        code p buff lexbuf }

    | '"' {
        string lexbuf.StartPos (StringBuilder 100) lexbuf }
 
    | whitespace+ { token lexbuf }
    | newline {
        newline lexbuf
        token lexbuf }
    | ident_start_char ident_char* { IDENT (lexeme lexbuf) }

    | '~' { TILDE }
    | '|' { BAR }
    | '.' { DOT }
    | '+' { PLUS }
    | '*' { STAR }
    | '?' { QMARK }
    | '=' { EQUALS }
    | '[' { LBRACK }
    | ']' { RBRACK }
    | '(' { LPAREN }
    | ')' { RPAREN }
    | '_' { UNDERSCORE }
    | '&' { AMP }
    | '^' { HAT }
    | '-' { DASH }
    | "(*" {
        comment lexbuf.StartPos lexbuf
        |> ignore
        token lexbuf }
    | "//" [^'\n''\r']* { token lexbuf }
    | _ { unexpected_char lexbuf }
    | eof { EOF }

and string p buff = parse
    |  '\\' newline {
        newline lexbuf
        string p buff lexbuf }
    |  '\\' ( '"' | '\\' | '\'' | 'n' | 't' | 'b' | 'r') {
        buff.Append (escape (lexeme lexbuf).[1]) |> ignore
        string p buff lexbuf }
    | trigraph {
        let s = lexeme lexbuf
        trigraph s.[1] s.[2] s.[3]
        |> buff.Append
        |> ignore
        string p buff lexbuf }
    | '"' { STRING <| buff.ToString () }
    | newline {
        newline lexbuf
        buff.AppendLine () |> ignore
        string p buff lexbuf }
    | (whitespace | letter | digit)+ {
        buff.Append (lexeme lexbuf) |> ignore
        string p buff lexbuf }
    | eof {
        let msg = sprintf "End of file in string started at (%d,%d)." p.pos_lnum (p.pos_cnum - p.pos_bol)
        raise <| exn msg }
    | _ {
        buff.Append (lexeme lexbuf).[0] |> ignore
        string p buff lexbuf }

and code p buff = parse
    | "}" {
        //CODE (Substring.ofString <| buff.ToString (), p)
        CODE (Substring.ofString <| buff.ToString ())
        }
    | "{" {
        buff.Append (lexeme lexbuf) |> ignore
        code p buff lexbuf |> ignore
        buff.Append "}" |> ignore
        code p buff lexbuf }
    | '\\' ('"' | '\\') {
        buff.Append (lexeme lexbuf) |> ignore
        code p buff lexbuf }
    | "\"" {
        buff.Append (lexeme lexbuf) |> ignore
        codestring buff lexbuf |> ignore
        code p buff lexbuf }
    | newline {
        newline lexbuf
        buff.AppendLine () |> ignore
        code p buff lexbuf }
    | (whitespace | letter | digit)+ {
        buff.Append (lexeme lexbuf) |> ignore
        code p buff lexbuf }
    | "//" [^'\n''\r']* {
        buff.Append (lexeme lexbuf) |> ignore
        code p buff lexbuf }
    | eof { EOF }
    | _ {
        buff.Append (lexeme lexbuf).[0] |> ignore
        code p buff lexbuf }

and codestring buff = parse
    | '\\' ('"' | '\\') {
        buff.Append (lexeme lexbuf) |> ignore
        codestring buff lexbuf }
    | '"' {
        buff.Append (lexeme lexbuf) |> ignore
        buff.ToString () }
    | newline {
        newline lexbuf
        buff.AppendLine () |> ignore
        codestring buff lexbuf }
    | (whitespace | letter | digit)+ {
        buff.Append (lexeme lexbuf) |> ignore
        codestring buff lexbuf }
    | eof {
        failwith "Unterminated string in code." }
    | _ {
        buff.Append (lexeme lexbuf).[0] |> ignore
        codestring buff lexbuf }

and comment p = parse
    | char { comment p lexbuf }
    | '"' {
        try string lexbuf.StartPos (StringBuilder 100) lexbuf
        with Failure s ->
            let msg = s + System.Environment.NewLine + sprintf "Error while processing string nested in comment started at (%d,%d)." p.pos_lnum (p.pos_cnum - p.pos_bol)
            raise <| exn msg
        |> ignore
        comment p lexbuf }
    | "(*" {
        try comment p lexbuf
        with Failure s ->
            let msg = s + System.Environment.NewLine + sprintf "Error while processing nested comment started at (%d,%d)." p.pos_lnum (p.pos_cnum - p.pos_bol)
            raise <| exn msg
        |> ignore
        comment p lexbuf }
    | newline {
        newline lexbuf
        comment p lexbuf }
    | "*)" { () }
    | eof {
        let msg = sprintf "End of file in comment started at (%d,%d)." p.pos_lnum (p.pos_cnum - p.pos_bol)
        raise <| exn msg }
    | [^ '\'' '(' '*' '\n' '\r' '"' ')' ]+ { comment p lexbuf }
    | _ { comment p lexbuf }

               
